"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Channel = exports.ChannelType = exports.NotifyType = void 0;
const crypto_1 = require("crypto");
const core_1 = require("oicq/lib/core");
const common_1 = require("oicq/lib/common");
const message_1 = require("oicq/lib/message");
const oicq_1 = require("oicq");
var NotifyType;
(function (NotifyType) {
    NotifyType[NotifyType["Unknown"] = 0] = "Unknown";
    NotifyType[NotifyType["AllMessages"] = 1] = "AllMessages";
    NotifyType[NotifyType["Nothing"] = 2] = "Nothing";
})(NotifyType = exports.NotifyType || (exports.NotifyType = {}));
var ChannelType;
(function (ChannelType) {
    ChannelType[ChannelType["Unknown"] = 0] = "Unknown";
    ChannelType[ChannelType["Text"] = 1] = "Text";
    ChannelType[ChannelType["Voice"] = 2] = "Voice";
    ChannelType[ChannelType["Live"] = 5] = "Live";
    ChannelType[ChannelType["App"] = 6] = "App";
    ChannelType[ChannelType["Forum"] = 7] = "Forum";
})(ChannelType = exports.ChannelType || (exports.ChannelType = {}));
class Channel {
    constructor(guild, channel_id) {
        this.guild = guild;
        this.channel_id = channel_id;
        this.channel_name = "";
        this.channel_type = ChannelType.Unknown;
        this.notify_type = NotifyType.Unknown;
        (0, common_1.lock)(this, "guild");
        (0, common_1.lock)(this, "channel_id");
    }
    _renew(channel_name, notify_type, channel_type) {
        this.channel_name = channel_name;
        this.notify_type = notify_type;
        this.channel_type = channel_type;
    }
    /**
     * 发送频道消息
     * 暂时仅支持发送： 文本、AT、表情
     */
    async sendMessage(content) {
        const payload = await this.guild.app.client.sendUni("MsgProxy.SendMsg", core_1.pb.encode({
            1: {
                1: {
                    1: {
                        1: BigInt(this.guild.guild_id),
                        2: Number(this.channel_id),
                        3: this.guild.app.client.uin
                    },
                    2: {
                        1: 3840,
                        3: (0, crypto_1.randomBytes)(4).readUInt32BE()
                    }
                },
                3: {
                    1: new message_1.Converter(content).rich
                }
            }
        }));
        const rsp = core_1.pb.decode(payload);
        if (rsp[1])
            throw new oicq_1.ApiRejection(rsp[1], rsp[2]);
        return {
            seq: rsp[4][2][4],
            rand: rsp[4][2][3],
            time: rsp[4][2][6],
        };
    }
    /** 撤回频道消息 */
    async recallMessage(seq) {
        const body = core_1.pb.encode({
            1: BigInt(this.guild.guild_id),
            2: Number(this.channel_id),
            3: Number(seq)
        });
        await this.guild.app.client.sendOidbSvcTrpcTcp("OidbSvcTrpcTcp.0xf5e_1", body);
        return true;
    }
}
exports.Channel = Channel;
