"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuildApp = void 0;
const events_1 = __importDefault(require("events"));
const oicq_1 = require("oicq");
const core_1 = require("oicq/lib/core");
const common_1 = require("oicq/lib/common");
const internal_1 = require("./internal");
oicq_1.Client.prototype.sendOidbSvcTrpcTcp = async function (cmd, body) {
    const sp = cmd //OidbSvcTrpcTcp.0xf5b_1
        .replace("OidbSvcTrpcTcp.", "")
        .split("_");
    const type1 = parseInt(sp[0], 16), type2 = parseInt(sp[1]);
    body = core_1.pb.encode({
        1: type1,
        2: type2,
        4: body,
        6: "android " + this.apk.ver,
    });
    const payload = await this.sendUni(cmd, body);
    (0, common_1.log)(payload);
    const rsp = core_1.pb.decode(payload);
    if (rsp[3] === 0)
        return rsp[4];
    throw new oicq_1.ApiRejection(rsp[3], rsp[5]);
};
/** 获取应用程序入口 */
class GuildApp extends events_1.default {
    constructor(client) {
        super();
        /** 我的频道id */
        this.tiny_id = "";
        /** 我加入的频道列表 */
        this.guilds = new Map();
        client.on("internal.sso", (cmd, payload) => {
            if (cmd === "trpc.group_pro.synclogic.SyncLogic.PushFirstView")
                internal_1.onFirstView.call(this, payload);
            else if (cmd === "MsgPush.PushGroupProMsg")
                internal_1.onGroupProMsg.call(this, payload);
        });
        client.on("system.online", _ => this.tiny_id = client.tiny_id);
        this.c = client;
        (0, common_1.lock)(this, "c");
    }
    /** 获得所属的客户端对象 */
    get client() {
        return this.c;
    }
    /** 绑定QQ客户端 */
    static bind(client) {
        return new GuildApp(client);
    }
    /** 重新加载频道列表 */
    reloadGuilds() {
        this.c.sendUni("trpc.group_pro.synclogic.SyncLogic.SyncFirstView", core_1.pb.encode({ 1: 0, 2: 0, 3: 0 })).then(payload => {
            this.tiny_id = String(core_1.pb.decode(payload)[6]);
        }).catch(common_1.NOOP);
        return new Promise((resolve, reject) => {
            const id = setTimeout(reject, 5000);
            this.once("ready", () => {
                clearTimeout(id);
                resolve();
            });
        });
    }
}
exports.GuildApp = GuildApp;
